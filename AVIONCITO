<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juego de Avioncito Mejorado</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #87CEEB;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
        }
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
        #bestScoreDisplay {
            position: absolute;
            top: 50px;
            left: 10px;
            color: white;
            font-size: 16px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <div id="info">Puntuación: 0 | Nivel: 1 | Vidas: 2</div>
    <div id="bestScoreDisplay">Mejor Puntuación: 0</div>
    <canvas id="gameCanvas"></canvas>

    <audio id="crashSound" src="https://www.soundjay.com/button/beep-07.wav"></audio>
    <audio id="backgroundMusic" src="https://opengameart.org/sites/default/files/Overworld_0.mp3" loop></audio>
    <audio id="gameOverMusic" src="https://opengameart.org/sites/default/files/game-over-song.mp3"></audio>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const crashSound = document.getElementById('crashSound');
        const backgroundMusic = document.getElementById('backgroundMusic');
        const gameOverMusic = document.getElementById('gameOverMusic');

        // Configuración de nubes
        const clouds = [];
        function createCloud() {
            return {
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height / 2,
                speed: Math.random() * 1 + 0.5,
                size: Math.random() * 50 + 30
            };
        }

        for (let i = 0; i < 10; i++) {
            clouds.push(createCloud());
        }

        function drawClouds() {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
            clouds.forEach(cloud => {
                ctx.beginPath();
                ctx.arc(cloud.x, cloud.y, cloud.size, 0, Math.PI * 2);
                ctx.fill();
                
                // Movimiento de nubes
                cloud.x += cloud.speed;
                if (cloud.x > canvas.width) {
                    cloud.x = -cloud.size;
                }
            });
        }

        const particleTypes = [
            { color: 'red', size: 5 },
            { color: 'orange', size: 4 },
            { color: 'yellow', size: 3 }
        ];

        let particles = [];
        function createExplosionParticles(x, y) {
            for (let i = 0; i < 20; i++) {
                const particleType = particleTypes[Math.floor(Math.random() * particleTypes.length)];
                particles.push({
                    x: x,
                    y: y,
                    vx: (Math.random() - 0.5) * 10,
                    vy: (Math.random() - 0.5) * 10,
                    color: particleType.color,
                    size: particleType.size,
                    life: 30
                });
            }
        }

        function updateParticles() {
            particles = particles.filter(p => {
                p.x += p.vx;
                p.y += p.vy;
                p.life--;
                return p.life > 0;
            });
        }

        function drawParticles() {
            particles.forEach(p => {
                ctx.fillStyle = p.color;
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
                ctx.fill();
            });
        }

        let plane = {
            x: canvas.width / 2 - 25,
            y: canvas.height - 150,
            width: 50,
            height: 50,
            speed: 10,
            lives: 2,
            invincibilityFrames: 0,
            color: 'yellow'
        };

        const obstacleTypes = [
            { color: 'gray', minSize: 20, maxSize: 40 },
            { color: 'darkgray', minSize: 15, maxSize: 30 },
            { color: 'lightgray', minSize: 10, maxSize: 25 }
        ];

        let obstacles = [];
        let score = 0;
        let level = 1;
        let obstacleSpeed = 3;
        let obstacleFrequency = 0.02;
        let gameRunning = true;

        function drawPlane() {
            ctx.fillStyle = plane.color;
            ctx.beginPath();
            if (plane.invincibilityFrames % 2 === 0) {  // Parpadeo durante invencibilidad
                ctx.moveTo(plane.x, plane.y);
                ctx.lineTo(plane.x - plane.width / 2, plane.y + plane.height);
                ctx.lineTo(plane.x + plane.width / 2, plane.y + plane.height);
                ctx.closePath();
                ctx.fill();
            }
        }

        function drawObstacles() {
            obstacles.forEach(obstacle => {
                ctx.fillStyle = obstacle.color;
                ctx.beginPath();
                ctx.arc(obstacle.x, obstacle.y, obstacle.size, 0, Math.PI * 2);
                ctx.fill();
            });
        }

        function updateObstacles() {
            obstacles.forEach(obstacle => {
                obstacle.y += obstacleSpeed;
            });

            obstacles = obstacles.filter(obstacle => obstacle.y < canvas.height);

            if (Math.random() < obstacleFrequency) {
                const obstacleType = obstacleTypes[Math.floor(Math.random() * obstacleTypes.length)];
                const size = Math.random() * (obstacleType.maxSize - obstacleType.minSize) + obstacleType.minSize;
                obstacles.push({
                    x: Math.random() * canvas.width,
                    y: -size,
                    size: size,
                    color: obstacleType.color
                });
            }
        }

        function checkCollision() {
            if (plane.invincibilityFrames > 0) {
                plane.invincibilityFrames--;
                return;
            }

            for (let obstacle of obstacles) {
                const distX = Math.abs(plane.x - obstacle.x);
                const distY = Math.abs(plane.y - obstacle.y);

                if (distX < plane.width / 2 + obstacle.size && distY < plane.height / 2 + obstacle.size) {
                    crashSound.play();
                    createExplosionParticles(plane.x, plane.y);
                    plane.lives--;
                    plane.invincibilityFrames = 60;  // 1 segundo de invencibilidad
                    plane.color = 'red';

                    setTimeout(() => {
                        plane.color = 'yellow';
                    }, 1000);

                    if (plane.lives <= 0) {
                        gameRunning = false;
                    }
                }
            }
        }

        function updateScoreAndLevel() {
            score++;
            if (score % 100 === 0 && level < 100) {
                level++;
                obstacleSpeed += 0.5;
                obstacleFrequency += 0.005;
            }
            
            // Actualizar mejor puntuación
            const bestScore = localStorage.getItem('bestScore') || 0;
            if (score > bestScore) {
                localStorage.setItem('bestScore', score);
                document.getElementById('bestScoreDisplay').innerText = `Mejor Puntuación: ${score}`;
            }

            document.getElementById('info').innerText = `Puntuación: ${score} | Nivel: ${level} | Vidas: ${plane.lives}`;
        }

        function gameLoop() {
            if (!gameRunning) {
                backgroundMusic.pause();
                gameOverMusic.play();
                alert(`Juego terminado. Puntuación final: ${score} | Nivel alcanzado: ${level}`);
                window.location.reload();
                return;
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawClouds();
            drawPlane();
            drawObstacles();
            drawParticles();
            updateObstacles();
            updateParticles();
            checkCollision();
            updateScoreAndLevel();

            requestAnimationFrame(gameLoop);
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft' && plane.x > 0) {
                plane.x -= plane.speed;
            }
            if (e.key === 'ArrowRight' && plane.x < canvas.width - plane.width) {
                plane.x += plane.speed;
            }
            if (e.key === 'ArrowUp' && plane.y > 0) {
                plane.y -= plane.speed;
            }
            if (e.key === 'ArrowDown' && plane.y < canvas.height - plane.height) {
                plane.y += plane.speed;
            }
        });

        // Iniciar música de fondo
        backgroundMusic.play();

        gameLoop();
    </script>
</body>
</html>
